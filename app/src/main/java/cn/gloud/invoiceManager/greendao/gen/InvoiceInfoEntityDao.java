package cn.gloud.invoiceManager.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.gloud.invoiceManager.Entity.InvoiceInfoEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INVOICE_INFO_ENTITY".
*/
public class InvoiceInfoEntityDao extends AbstractDao<InvoiceInfoEntity, Long> {

    public static final String TABLENAME = "INVOICE_INFO_ENTITY";

    /**
     * Properties of entity InvoiceInfoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property _mMd5Info = new Property(1, String.class, "_mMd5Info", false, "_M_MD5_INFO");
        public final static Property _mInvoideInfoLeftNum = new Property(2, String.class, "_mInvoideInfoLeftNum", false, "_M_INVOIDE_INFO_LEFT_NUM");
        public final static Property _mInvoideInfoNum = new Property(3, String.class, "_mInvoideInfoNum", false, "_M_INVOIDE_INFO_NUM");
        public final static Property _mInvoideInfoPrice = new Property(4, String.class, "_mInvoideInfoPrice", false, "_M_INVOIDE_INFO_PRICE");
        public final static Property _mInvoideInfoDate = new Property(5, String.class, "_mInvoideInfoDate", false, "_M_INVOIDE_INFO_DATE");
        public final static Property _mInvoideInfoCheck = new Property(6, String.class, "_mInvoideInfoCheck", false, "_M_INVOIDE_INFO_CHECK");
        public final static Property _mMaster = new Property(7, String.class, "_mMaster", false, "_M_MASTER");
        public final static Property _mAllInfoStr = new Property(8, String.class, "_mAllInfoStr", false, "_M_ALL_INFO_STR");
        public final static Property _mCreateDate = new Property(9, String.class, "_mCreateDate", false, "_M_CREATE_DATE");
    }


    public InvoiceInfoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public InvoiceInfoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INVOICE_INFO_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"_M_MD5_INFO\" TEXT," + // 1: _mMd5Info
                "\"_M_INVOIDE_INFO_LEFT_NUM\" TEXT," + // 2: _mInvoideInfoLeftNum
                "\"_M_INVOIDE_INFO_NUM\" TEXT," + // 3: _mInvoideInfoNum
                "\"_M_INVOIDE_INFO_PRICE\" TEXT," + // 4: _mInvoideInfoPrice
                "\"_M_INVOIDE_INFO_DATE\" TEXT," + // 5: _mInvoideInfoDate
                "\"_M_INVOIDE_INFO_CHECK\" TEXT," + // 6: _mInvoideInfoCheck
                "\"_M_MASTER\" TEXT," + // 7: _mMaster
                "\"_M_ALL_INFO_STR\" TEXT," + // 8: _mAllInfoStr
                "\"_M_CREATE_DATE\" TEXT);"); // 9: _mCreateDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INVOICE_INFO_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InvoiceInfoEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String _mMd5Info = entity.get_mMd5Info();
        if (_mMd5Info != null) {
            stmt.bindString(2, _mMd5Info);
        }
 
        String _mInvoideInfoLeftNum = entity.get_mInvoideInfoLeftNum();
        if (_mInvoideInfoLeftNum != null) {
            stmt.bindString(3, _mInvoideInfoLeftNum);
        }
 
        String _mInvoideInfoNum = entity.get_mInvoideInfoNum();
        if (_mInvoideInfoNum != null) {
            stmt.bindString(4, _mInvoideInfoNum);
        }
 
        String _mInvoideInfoPrice = entity.get_mInvoideInfoPrice();
        if (_mInvoideInfoPrice != null) {
            stmt.bindString(5, _mInvoideInfoPrice);
        }
 
        String _mInvoideInfoDate = entity.get_mInvoideInfoDate();
        if (_mInvoideInfoDate != null) {
            stmt.bindString(6, _mInvoideInfoDate);
        }
 
        String _mInvoideInfoCheck = entity.get_mInvoideInfoCheck();
        if (_mInvoideInfoCheck != null) {
            stmt.bindString(7, _mInvoideInfoCheck);
        }
 
        String _mMaster = entity.get_mMaster();
        if (_mMaster != null) {
            stmt.bindString(8, _mMaster);
        }
 
        String _mAllInfoStr = entity.get_mAllInfoStr();
        if (_mAllInfoStr != null) {
            stmt.bindString(9, _mAllInfoStr);
        }
 
        String _mCreateDate = entity.get_mCreateDate();
        if (_mCreateDate != null) {
            stmt.bindString(10, _mCreateDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InvoiceInfoEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String _mMd5Info = entity.get_mMd5Info();
        if (_mMd5Info != null) {
            stmt.bindString(2, _mMd5Info);
        }
 
        String _mInvoideInfoLeftNum = entity.get_mInvoideInfoLeftNum();
        if (_mInvoideInfoLeftNum != null) {
            stmt.bindString(3, _mInvoideInfoLeftNum);
        }
 
        String _mInvoideInfoNum = entity.get_mInvoideInfoNum();
        if (_mInvoideInfoNum != null) {
            stmt.bindString(4, _mInvoideInfoNum);
        }
 
        String _mInvoideInfoPrice = entity.get_mInvoideInfoPrice();
        if (_mInvoideInfoPrice != null) {
            stmt.bindString(5, _mInvoideInfoPrice);
        }
 
        String _mInvoideInfoDate = entity.get_mInvoideInfoDate();
        if (_mInvoideInfoDate != null) {
            stmt.bindString(6, _mInvoideInfoDate);
        }
 
        String _mInvoideInfoCheck = entity.get_mInvoideInfoCheck();
        if (_mInvoideInfoCheck != null) {
            stmt.bindString(7, _mInvoideInfoCheck);
        }
 
        String _mMaster = entity.get_mMaster();
        if (_mMaster != null) {
            stmt.bindString(8, _mMaster);
        }
 
        String _mAllInfoStr = entity.get_mAllInfoStr();
        if (_mAllInfoStr != null) {
            stmt.bindString(9, _mAllInfoStr);
        }
 
        String _mCreateDate = entity.get_mCreateDate();
        if (_mCreateDate != null) {
            stmt.bindString(10, _mCreateDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public InvoiceInfoEntity readEntity(Cursor cursor, int offset) {
        InvoiceInfoEntity entity = new InvoiceInfoEntity( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // _mMd5Info
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // _mInvoideInfoLeftNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // _mInvoideInfoNum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // _mInvoideInfoPrice
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // _mInvoideInfoDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // _mInvoideInfoCheck
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // _mMaster
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // _mAllInfoStr
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // _mCreateDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InvoiceInfoEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.set_mMd5Info(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.set_mInvoideInfoLeftNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.set_mInvoideInfoNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.set_mInvoideInfoPrice(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.set_mInvoideInfoDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.set_mInvoideInfoCheck(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.set_mMaster(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.set_mAllInfoStr(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.set_mCreateDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InvoiceInfoEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InvoiceInfoEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InvoiceInfoEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
